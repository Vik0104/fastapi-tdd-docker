# name: Continuous Integration and Delivery

# on: [push]

# env:
#   IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/summarizer

# jobs:

#   build:
#     name: Build Docker Image
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           ref: main
#       - name: Log in to GitHub Packages
#         run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Pull image
#         run: |
#           docker pull ${{ env.IMAGE }}:latest || true
#       - name: Build image
#         run: |
#           docker build \
#             --cache-from ${{ env.IMAGE }}:latest \
#             --tag ${{ env.IMAGE }}:latest \
#             --file ./project/Dockerfile.prod \
#             "./project"
#       - name: Push image
#         run: |
#           docker push ${{ env.IMAGE }}:latest

#   test:
#     name: Test Docker Image
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3
#         with:
#           ref: main
#       - name: Log in to GitHub Packages
#         run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin ghcr.io
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       - name: Pull image
#         run: |
#           docker pull ${{ env.IMAGE }}:latest || true
#       - name: Build image
#         run: |
#           docker build \
#             --cache-from ${{ env.IMAGE }}:latest \
#             --tag ${{ env.IMAGE }}:latest \
#             --file ./project/Dockerfile.prod \
#             "./project"
#       - name: Run container
#         run: |
#           docker run \
#             -d \
#             --name fastapi-tdd \
#             -e PORT=8765 \
#             -e ENVIRONMENT=dev \
#             -e DATABASE_URL=sqlite://sqlite.db \
#             -e DATABASE_TEST_URL=sqlite://sqlite.db \
#             -p 5003:8765 \
#             ${{ env.IMAGE }}:latest
#       - name: Pytest
#         run: docker exec fastapi-tdd python -m pytest .
#       - name: Flake8
#         run: docker exec fastapi-tdd python -m flake8 .
#       - name: Black
#         run: docker exec fastapi-tdd python -m black . --check
#       - name: isort
#         run: docker exec fastapi-tdd python -m isort . --check-only
name: Continuous Integration and Delivery

on: [push]

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/summarizer

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./project
          file: ./project/Dockerfile.prod
          push: true
          tags: ghcr.io/${{ env.REPO }}/summarizer:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      # This step ensures we use the new cache in the next run
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}
      - name: Lowercase the repo name
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - name: Pull image
        run: docker pull ghcr.io/${{ env.REPO }}/summarizer:latest
      - name: Run container
        run: |
          docker run \
            -d \
            --name fastapi-tdd \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ghcr.io/${{ env.REPO }}/summarizer:latest
      - name: Pytest
        run: docker exec fastapi-tdd python -m pytest .
      - name: Flake8
        run: docker exec fastapi-tdd python -m flake8 .
      - name: Black
        run: docker exec fastapi-tdd python -m black . --check
      - name: isort
        run: docker exec fastapi-tdd python -m isort . --check-only